/**
 * Source Map Utilities
 *
 * Maps WASM errors to AssemblyScript source locations using V8 stack traces + source maps.
 *
 * Approach: V8's Error.prepareStackTrace provides WAT (WebAssembly Text) line:column positions,
 * which can be mapped to AS source using the source maps generated by AS compiler.
 */

import { SourceMapConsumer, type RawSourceMap } from 'source-map';
import { debug } from './debug.mjs';
import type { SourceLocation, WebAssemblyCallSite } from '../types.js';

/**
 * Extract structured call stack from V8 using Error.prepareStackTrace
 *
 * V8 provides a special API to access structured stack traces with line:column info.
 * This gives us WAT text positions which can be mapped to AS source via source maps.
 *
 * @param error - Error object to extract stack from
 * @returns Array of V8 CallSite objects
 */
export function extractCallStack(error: Error): NodeJS.CallSite[] {
  let stackTrace: NodeJS.CallSite[] = [];

  const originalPrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = (_err: Error, structuredStackTrace: NodeJS.CallSite[]) => {
    stackTrace = structuredStackTrace;
    return ''; // Return empty string to avoid modifying error.stack
  };

  // Access error.stack to trigger prepareStackTrace (result unused, just triggers callback)
  error.stack;

  // Restore original
  Error.prepareStackTrace = originalPrepareStackTrace;

  return stackTrace;
}

/**
 * Map WAT text position to AS source using source map
 *
 * @param watLine - Line number in WAT text (1-indexed)
 * @param watColumn - Column number in WAT text (0-indexed)
 * @param sourceMapJson - Parsed source map from AS compiler
 * @returns Source location or null if mapping fails
 */
export async function mapWATtoSource(
  watLine: number,
  watColumn: number,
  sourceMapJson: RawSourceMap
): Promise<SourceLocation | null> {
  const consumer = await new SourceMapConsumer(sourceMapJson);

  const original = consumer.originalPositionFor({
    line: watLine,
    column: watColumn
  });

  consumer.destroy();

  if (!original.source || original.line === null || original.column === null) {
    debug('[SourceMap] Mapping failed:', {
      watInput: { line: watLine, column: watColumn },
      sourceMapResult: {
        hasSource: !!original.source,
        source: original.source || 'null',
        hasLine: original.line !== null,
        line: original.line,
        hasColumn: original.column !== null,
        column: original.column
      }
    });
    return null;
  }

  return {
    fileName: original.source,
    lineNumber: original.line,
    columnNumber: original.column
  };
}

/**
 * Create WebAssembly call site with source mapping
 *
 * Takes a V8 CallSite and maps it to AS source location if possible.
 *
 * @param callSite - V8 CallSite object from Error.prepareStackTrace
 * @param sourceMapJson - Parsed source map from AS compiler (null if not available)
 * @returns Mapped call site or null if not a WASM call site
 */
export async function createWebAssemblyCallSite(
  callSite: NodeJS.CallSite,
  sourceMapJson: RawSourceMap | null
): Promise<WebAssemblyCallSite | null> {
  const fileName = callSite.getFileName();

  // Only process WASM call sites
  if (!fileName || !fileName.startsWith('wasm')) {
    return null;
  }

  const watLine = callSite.getLineNumber();
  const watColumn = callSite.getColumnNumber();
  const functionName = callSite.getFunctionName() || 'wasm-function[unknown]';

  debug('[SourceMap] Processing WASM call site:', { fileName, watLine, watColumn, functionName });

  // Try to map to source
  if (sourceMapJson && watLine && watColumn) {
    const sourceLocation = await mapWATtoSource(watLine, watColumn, sourceMapJson);

    if (sourceLocation) {
      debug('[SourceMap] Mapped to source:', sourceLocation);
      return {
        functionName,
        fileName: sourceLocation.fileName,
        lineNumber: sourceLocation.lineNumber,
        columnNumber: sourceLocation.columnNumber
      };
    }
  }

  debug('[SourceMap] No mapping found, using WAT position');

  // Fallback to WAT position
  return {
    functionName,
    fileName: fileName,
    lineNumber: watLine || -1,
    columnNumber: watColumn || -1
  };
}
